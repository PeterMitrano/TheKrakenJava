// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team293.robot.subsystems;

import org.usfirst.frc.team293.robot.commands.DriveWithGamepad;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class DriveTrain extends Subsystem {
	SpeedController frontLeft;
	SpeedController frontRight;
	SpeedController rearLeft;
	SpeedController rearRight;
	Encoder frontLeftEncoder;
	Encoder frontRightEncoder;
	RobotDrive robotDrive;
	AnalogInput rangefinder;
	Gyro gyro;
	double dpp = 0.0015;

	public DriveTrain() {
		rangefinder = new AnalogInput(2);
		LiveWindow.addSensor("Elevator", "Ultrasonic", rangefinder);

		frontLeftEncoder = new Encoder(2, 3, false, EncodingType.k4X);
		frontLeftEncoder.setDistancePerPulse(dpp);
		frontLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);

		frontRightEncoder = new Encoder(4, 5, true, EncodingType.k4X);
		frontRightEncoder.setDistancePerPulse(dpp);
		frontRightEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);

		frontLeft = new Talon(1);
		LiveWindow.addActuator("DriveTrain", "frontLeft", (Talon) frontLeft);

		frontRight = new Talon(2);
		LiveWindow.addActuator("DriveTrain", "frontRight", (Talon) frontRight);

		rearLeft = new Talon(3);
		LiveWindow.addActuator("DriveTrain", "rearLeft", (Talon) rearLeft);

		rearRight = new Talon(4);
		LiveWindow.addActuator("DriveTrain", "rearRight", (Talon) rearRight);

		robotDrive = new RobotDrive(frontLeft, rearLeft, frontRight, rearRight);

		robotDrive.setSafetyEnabled(true);
		robotDrive.setExpiration(0.1);
		robotDrive.setSensitivity(0.5);
		robotDrive.setMaxOutput(1.0);
		gyro = new Gyro(1);
		LiveWindow.addSensor("DriveTrain", "gyro", gyro);
		LiveWindow.addSensor("DriveTrain", "left encoder", frontLeftEncoder);
		LiveWindow.addSensor("DriveTrain", "right encoder", frontRightEncoder);
	}

	public void initDefaultCommand() {
		setDefaultCommand(new DriveWithGamepad());
	}

	public void stop() {
		robotDrive.stopMotor();
	}

	/**
	 * @param gamepad
	 *            this assumes a XBox controller, but you may have to change the
	 *            axis numbers for you controller
	 */
	public void driveTank(Joystick gamepad) {
		robotDrive.tankDrive(gamepad.getRawAxis(1), gamepad.getRawAxis(3));
	}

	public void drive(double l, double r) {
		robotDrive.tankDrive(-l, -r);
	}

	public double getAngle() {
		return gyro.getAngle();
	}

	public double getAverageDistance() {
		return (frontLeftEncoder.getDistance() + frontRightEncoder
				.getDistance()) / 2.0;
	}

	public boolean nearTote() {
		return rangefinder.getVoltage() < 0.2;
	}

}