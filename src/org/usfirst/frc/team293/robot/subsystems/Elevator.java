// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team293.robot.subsystems;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * The elevator subsystem uses a PID to control the position
 */
public class Elevator extends PIDSubsystem {

	/**
	 *  these numbers are all in inches 
	 */
	public static final int bottom = 0, top = 70;
	public static final int getTote = 3,carryTote = 12, liftTote = 22;
	public static final int getBin = 10, carryBin = 32, liftBin = 44;

	Encoder encoder;
	SpeedController motor;

	public Elevator() {
		super("Elevator", 0.1, 0.003, 0.18);
		motor = new Talon(6);
		encoder = new Encoder(0, 1, false, EncodingType.k4X);
		encoder.setDistancePerPulse(1.0);
		encoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
		LiveWindow.addActuator("Elevator", "PID", this.getPIDController());
		LiveWindow.addSensor("Elevator", "Position", encoder);

		getPIDController().setContinuous(false);
		setAbsoluteTolerance(1);
	}

	public void initDefaultCommand() {
	}

	@Override
	protected double returnPIDInput() {
		return encoder.pidGet();
	}

	@Override
	protected void usePIDOutput(double output) {
		motor.set(output);
	}

	/** in simualtion, this will cause the elevator to fall */
	public void stop() {
		motor.set(0);

	}
}
