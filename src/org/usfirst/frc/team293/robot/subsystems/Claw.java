// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team293.robot.subsystems;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 * Controls the claw
 */
public class Claw extends Subsystem {
    SpeedController clawMotor;

    DigitalInput leftClawLimit;
    DigitalInput rightClawLimit;

    Encoder clawEncoder;

    public Claw(){
        clawMotor = new Talon(5);
        leftClawLimit = new DigitalInput(7);
        rightClawLimit = new DigitalInput(8);
        clawEncoder = new Encoder(6, 7, false, EncodingType.k4X);
    	
        LiveWindow.addActuator("Claw", "claw motor", (Talon) clawMotor);
        LiveWindow.addActuator("Claw", "clamp encoder", (Encoder) clawEncoder);
        LiveWindow.addActuator("Claw", "left claw Limit Switch", (DigitalInput) leftClawLimit);
        LiveWindow.addActuator("Claw", "right claw Limit Switch", (DigitalInput) rightClawLimit);
    }

    public void initDefaultCommand(){

    }


    public void open(){
        clawMotor.set(-1); //funny how this happens...you'd think open was positive!
    }

    public void close(){
        clawMotor.set(1);
    }

    /** remember, in simulation, calling this will lose power to the arms */
    public void stop(){
        clawMotor.set(0);
    }

	public boolean hitObject() {
		return leftClawLimit.get() || rightClawLimit.get();
	}

	public boolean isOpen() {
		return clawEncoder.getDistance() < -0.3;
	}
}